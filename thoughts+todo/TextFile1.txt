
Explaining the Tetris Piece Movement Logic:

x→    0 1 2 3 4 5 6 7 8 9 10
y↓
 0    . . . . X P X . . . .
 1    . . . . . X . . . . .
 2    . . . . . . . . . . .
 3    . . . . . . . . . . .
 4    . . . . . . . . . . .
 5    . . . . . . . . . . .
 6    . . . . . . . . . . .
 7    . . . . . . . . . . .
 8    . . . . . . . . . . .
 9    . . . . . . . . . . .
 10   . . . . . . . . . . .


 In the above example, lets assume we are using the t. shaped piece.
 (0,0), (-1,0), (1,0), (0,1)

 P = static (int x, int y) positionOfPiece; the P value represents the point expressed in the tupple (5,0). This is the starting point that will be the basis from whichc we define the center of our tetromino going forward,
 this anchor point is also the value that the offest pieces use to generate around. 

 X = static (int x, int y)[] currentPiece; the variable that holds the piece we are using from the piecespool. It provides the values that make up our block [ (0,0), (-1,0), (1,0), (0,1)], and will help determine the occupied 
 positions of offset pieces (other blocks) that build around anchor point. 
 
 . = empty position


 So the starting anchorpoint we want to use for P or the positionOfPiece is (width/2, 0) or in other words, (5,0). the piece starts at the top center of the grid to begin with, where we want our pieces to spawn.

 From there, the formula used to determine how and where the piece appears is based off the anchor point: positionOfPiece = (5,0) + the values of the blocks that make up the piece: [(0,0), (-1,0), (1,0), (0,1)].

    [x, y],       // center (anchor point)
    [x - 1, y],   // left
    [x + 1, y],   // right
    [x, y + 1]    // bottom

So for out T block, the relative positions would be:
    [5, 0],       // center
    [4, 0],       // left
    [6, 0],       // right
    [5, 1]        // bottom

If you want to MovePiece(0,1), or in other words down one space from the starting position, we would need to update the anchor point of the piece to be (5,1) + [(0,0), (-1,0), (1,0), (0,1)] to determine the offsets, which results in:
    [5, 1],       // center
    [4, 1],       // left
    [6, 1],       // right
    [5, 2]        // bottom)

Likewise, if you want to MovePiece(1,0), or in other words to the right one space from the starting position, we would need to update the anchor point of the piece to be (6,0) + [(0,0), (-1,0), (1,0), (0,1)] to determine the offsets, which results in:
    [6, 0],       // center
    [5, 0],       // left
    [7, 0],       // right
    [6, 1]        // bottom)

Each of these numbers represents a position on the game grid. This is essentially the core logic of the entire game. It is just updating the values of these different arrays to determine where the piece is, and then printing the values to the grid.


To make sure we can accomplish this and have it work with the game logic, where pieces cant go through other pieces or off the gamegrid, we need to check if the piece placement is valid.

we can do this using this method:

public static bool CanMove(int dx, int dy)  

    {                                                       
        foreach (var (px, py) in currentPiece)    
        
        {                                                 
            int x = positionOfPiece.x + px + dx;
            int y = positionOfPiece.y + py + dy;
            if (x < 0 || x >= width || y < 0 || y >= height || (y >= 0 && Grid.newGrid[y, x] != 0))
                return false;
        }

        return true;
    }

The CanMove method checks if the piece is allowed to move to a new position. It does this by adding the value of user inputs (dx, dy) to the anchor point (center) of the current piece's overall position (positionOfPiece), and to the value of the offset blocks around the anchor point(px, py). 
The result is a shift in the center position of the anchor point that corresponds with the user input, and updated values for the offset blocks as well. If after this calculation, the resulting position is outside the grid boundaries or collides with an already occupied cell (where Grid.newGrid[y, x] != 0),
then the piece isn't allowed to move (retuns false). If all blocks can move without issue, then the piece is allowed to move (returns true).


so to put the method in mroe straightforward terms,


The piece moves by recieving (left and right inputs, and up and down inputs)
{
    and by using those values, as well as the values foreach (of the blocks on x axis, and the values of the blocks on y axis in the tuple that makes up the tetromino shape)  
    {
       we can sum the x value of the anchor point + x axis values for the offset blocks that make up tetromino + x axis value directional inputs to get the value for int x;

       we can sum the y value in the tuple that makes up the anchor point + y axis values for the offset blocks that make up tetromino + y axis value directional inputs to get the value for int y;

       then we can use the values of int x and int y to determine if (the values of the x axis of the tetris piece are above the grid, or are outside the grid's width, or if the sum of the values of y are above the height of the grid,
       outside its width, or if the piece is wthin the grid but the cell is already occupied (!= 0, 1 means occupied)
       
       If any of these scenarios are the case, the piece isn't allowed to move;
    }
    but if any of these scenarios are not the case, the piece is allowed to move;
}


This method is pretty much the core logic of the entire game, and many of the other methods in the game are built around this logic. 

For example, our NewPiece method uses this logic to determine if the new piece can be placed at the starting position. If it can't, the game is over.

 public static void NewPiece()                                                                         
    {
        currentPieceIndex = random.Next(piecesPool.Length);
        currentPiece = piecesPool[currentPieceIndex];
        positionOfPiece = ((width / 2), 0);
        if (!CanMove(0, 0)) gameOver = true;
    }

Our CanRotate method uses this logic to determine if the piece can be rotated without colliding with other pieces or going out of bounds.

   public static bool CanRotate((int x, int y)[] rotatedPiece)
    {
        foreach (var (px, py) in rotatedPiece)
        {
            int x = positionOfPiece.x + px;
            int y = positionOfPiece.y + py;
            if (x < 0 || x >= width || y < 0 || y >= height || (y >= 0 && Grid.newGrid[y, x] != 0))
                return false;
        }

        return true;
    }